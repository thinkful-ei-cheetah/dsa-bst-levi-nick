Draw a BST=========================================================

Given [ 3, 1, 4, 6, 9, 2, 5, 7 ]

-----|3|
--|1|-----|4|
---|2|------|6|
-----------|5||9|
-------------|7|
--------------|8|


Given [ E, A, S, Y, Q, U, E, S, T, I, O, N ]
--------|E|
--|A|---------|S|
----------|Q|------|Y|
--------|E|------|U|
---------|I|----|S|
-----------|O|---|T|
----------|N|

Remove the Root====================================================

Given [ 3, 1, 4, 6, 9, 2, 5, 7 ]

-----|4|
--|1|-----|6|
---|2|---|5||9|
-----------|7|

Given [ E, A, S, Y, Q, U, E, S, T, I, O, N ]
--------|E|
--|A|---------|S|
----------|Q|------|Y|
--------|I|------|U|
---------|O|----|S|
--------|N|------|T|

What does this program do?===========================================

function tree(t){
    if(!t){
        return 0;
    }
    return tree(t.left) + t.value + tree(t.right)
}

  + It will concatenate the values of all nodes in a tree at and below
    the starting node, in addition to 0s for both the left and right 
    children of the leaf nodes. If the values are numbers, it will return 
    the sum

Height of a BST=====================================================

function height(tree){
  // check are we at a leaf
    // if so, return 1

  // let iteration = 1

  // do we have 2 children
    // let left = height(tree.left)
    // let right = height(tree.right)
    // if(left > right) iteration += left
    // else iteration += right

  // do we have a left child?
    // iteration += height(tree.left)

  // do we have a right child?
    // iteration += height(tree.right)

  return iteration
}

Is is a BST?=========================================================

// ASSUMPTION (binary tree):
//  - each node can have 0, 1, or 2 child node(s)
//  - each node can have 0 or 1 parent(s)
//  - only 1 node can have 0 parent
//  - no duplicates!

// DETERMINE (binary SEARCH tree):
//  - every left child is less than its parent
//  - every right child is greater than its parent


function isBst(tree) {
  // define a result var and set it to true

  // is it a root && leaf node
  //  return result

  // leaf node (if !tree.left && !tree.right)
  //  return result

  // if tree.left exists
  //  if tree.left is greater than tree.key
  //    return false
  //  else
        result = isBst(tree.left)

  // if tree.right exists
  //  if tree.right is greater than tree.key
  //    return false
  //  else
  //    result = isBst(tree.right)

  // return result
}

Balanced BST=========================================================

Write an algorithm that checks if a BST is balanced 
(i.e., a tree where no 2 leaves differ in distance from the root by more than 1).


// ASSUMPTION (bst):
//  - 

function isBalanced(tree) {
  // if it has no parent AND is a leaf (single node tree)
  //  return true
  
  // if it is a leaf
  //  return 1

  // define depth to be 1

  // if 2 children
  //  recurse on left child and save as left //false
  //  recurse on right child and save as right // 1
  //  
  //  if either left or right returned 'false'
  //    return false
  //  
  //  if(Math.abs(left - right) > 1)
  //    return false
  //  else if (left > right)
  //    increment depth by left
  //  else
  //    increment depth by right

  // else if tree.left exists
  //  define left and set as return from recurse on left child
  //  if left is 'false'
  //    return false
  //  else
  //    depth += left

  // else if tree.right exists
  //  define right and set as return from recurse on right child
  //  if right is 'false'
  //    return false
  //  else
  //    depth += right

  // if in root
  //  return true
  // else 
  //  return depth
}

find 3rd largest =============================================

find3rd(tree)

while(tree.right !== null){
  tree = tree.right
}

// tree == largest node

if tree has left child   // we know 2nd largest is downward
  tree = tree.left
  while(tree.right !== null){  // get 2nd largest
    tree = tree.right
  }
  if this subtree(2nd largest) has a left child
    tree = tree.left
    while(tree.right !== null){
      tree = tree.right
    }
  else{
    is tree.parent > tree{
      tree = tree.parent.parent
    }
    else{
      tree = tree.parent
    }
  }

else{
  tree = tree.parent //  2nd largest
  if tree(2nd) has left child
    tree = tree.left
    while(tree.right !== null){
      tree = tree.right
    }
  else{
    tree = tree.parent
  }
}
return tree